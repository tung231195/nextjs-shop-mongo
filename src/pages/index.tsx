"use client";
import {
  Button,
  FormControl,
  FormControlLabel,
  RadioGroup,
} from "@mui/material";
import { FormLabel } from "@mui/material";
import {
  Box,
  debounce,
  Grid,
  ListItem,
  Radio,
  Tab,
  Tabs,
  useTheme,
} from "@mui/material";
import Head from "next/head";
import {
  ChangeEvent,
  ReactNode,
  useCallback,
  useEffect,
  useState,
} from "react";
import { useTranslation } from "react-i18next";
import { useDispatch, useSelector } from "react-redux";
import ProductItem from "src/components/card-product-item";
import CustomPagination from "src/components/pagination";
import CustomTextField from "src/components/text-field";
import { TPramsGetAllProduct } from "src/configs/@type/catalog/product";
import { CityDataType } from "src/configs/@type/city";
import { useAuth } from "src/hooks/useAuth";
import { useSettings } from "src/hooks/useSettings";
import { getAllProductsPublic } from "src/service/catalog/product";
import { getAllProductTypes } from "src/service/catalog/product-type";
import { AppDispatch, RootState } from "src/stores";
import { getAllProductTypeAction } from "src/stores/catalog/product-type/productTypeAction";
import { getAllCityAction } from "src/stores/city/cityAction";
import BlankLayout from "src/views/layouts/BlankLayout";
import DefaultLayout from "src/views/layouts/DefaultLayout";

export default function Home() {
  const theme = useTheme();
  const { settings } = useSettings();
  const { user } = useAuth();
  const { i18n, t } = useTranslation();
  const [allProducts, setAllProducts] = useState<TPramsGetAllProduct[]>([]);
  const [totalCount, setTotalCount] = useState(0);
  const [totalPage, setTotalPage] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [search, setSearch] = useState("");
  const [type, setType] = useState("");
  const [city, setCity] = useState<string>("");
  const [activeTab, setActiveTab] = useState<boolean>(false);
  const ITEM_PER_PAGE = 4;
  //** dispatch */
  const dispatch = useDispatch<AppDispatch>();
  const { productTypes } = useSelector(
    (state: RootState) => state.productTypeSlide
  );
  const { cities } = useSelector((state: RootState) => state.citySlide);
  const fetAllProducts = async () => {
    let params: TPramsGetAllProduct = {
      limit: ITEM_PER_PAGE,
      page: currentPage,
      search: search,
      productType: type,
      productLocation: city,
      status: 1,
      minPrice: 0,
      maxPrice: 0,
      minStart: 0,
      maxStar: 0,
    };

    const data = await getAllProductsPublic(params);
    setAllProducts(data?.data.data.products);
    setTotalCount(data?.data.data.totalCount);
    setTotalPage(data?.data.data.totalPage);
    setCurrentPage(currentPage);
  };
  useEffect(() => {
    fetAllProducts();
  }, [currentPage, search, type, city]);

  useEffect(() => {
    let params = { limit: -1, page: -1 };
    dispatch(getAllProductTypeAction(params));
  }, []);

  useEffect(() => {
    let params = { limit: -1, page: -1 };
    dispatch(getAllCityAction(params));
  }, []);

  //  const deboundSearch = useCallback(debounce((nextValue) => getAllProductsPublic(nextValue), 1000), [])
  // console.log('deboundSearch',deboundSearch)
  //hanlde
  const handleSearchItems = (
    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    setSearch(e.target.value);
  };
  // filter product type
  const hanldeFilterProductType = (_id: string) => {
    console.log("type", _id);
    setActiveTab(true);
    setType(_id);
  };
  const hanldeFilterCity = (_id: string) => {
    setCity(_id);
    console.log("city", _id);
  };
  return (
    <>
      <Head>
        <title>ANY ONE HELP ME NOW</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Grid container>
        <Grid item md={3}>
          <Box>
            <FormControl>
              <FormLabel id="demo-radio-buttons-group-label">
                Location
              </FormLabel>
              <RadioGroup
                aria-labelledby="demo-radio-buttons-group-label"
                defaultValue="female"
                name="radio-buttons-group"
              >
                {cities.length &&
                  cities.map((city: CityDataType) => {
                    return (
                      <FormControlLabel
                        key={city._id}
                        onClick={() => hanldeFilterCity(city._id)}
                        value={city._id}
                        control={<Radio />}
                        label={city.name}
                      />
                    );
                  })}
              </RadioGroup>
            </FormControl>
          </Box>
        </Grid>
        <Grid item md={9}>
          <Box>
            <Box
              sx={{
                display: "flex",
                justifyContent: "space-between",
                marginBottom: "28px",
              }}
            >
              <Box>
                <Box aria-label="tabs example">
                  {productTypes.length &&
                    productTypes.map((pType) => {
                      return (
                        <Button
                          sx={{ border: "1px solid #cccc", marginRight: "5px" }}
                          onClick={() => hanldeFilterProductType(pType._id)}
                          key={`${pType._id}`}
                        >
                          {pType.name}
                        </Button>
                      );
                    })}
                </Box>
              </Box>
              <Box>
                <CustomTextField onChange={(e) => handleSearchItems(e)} />
              </Box>
            </Box>
            <Grid container spacing={4}>
              {allProducts &&
                allProducts.map((product: any) => {
                  let cartItem = {
                      product:product._id,
                      name:product.name,
                      image:product.image,
                      price:product.price,
                      discount:product.discount,
                      amount:product.amount
                  }
                  return <ProductItem key={product._id} item={cartItem} />;
                })}
            </Grid>
            <Box>
              <CustomPagination
                totalPosts={totalCount}
                postsPerPage={ITEM_PER_PAGE}
                setCurrentPage={setCurrentPage}
                currentPage={currentPage}
              />
            </Box>
          </Box>
        </Grid>
      </Grid>
    </>
  );
}
Home.getLayout = (page: ReactNode) => <DefaultLayout>{page}</DefaultLayout>;
